import 'dart:math' as math;
import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:hackerspace_game_jam_2024/3d_renderer/object_3d.dart';
import 'package:hackerspace_game_jam_2024/3d_renderer/project.dart';
import 'package:vector_math/vector_math_64.dart' hide Colors;

final Object3D cube = Object3D(
  vertices: [
    Vector3(0.0 - 0.5, 0.0 - 0.5, 0.0 - 0.5),
    Vector3(0.0 - 0.5, 0.0 - 0.5, 1.0 - 0.5),
    Vector3(0.0 - 0.5, 1.0 - 0.5, 0.0 - 0.5),
    Vector3(0.0 - 0.5, 1.0 - 0.5, 1.0 - 0.5),
    Vector3(1.0 - 0.5, 0.0 - 0.5, 0.0 - 0.5),
    Vector3(1.0 - 0.5, 0.0 - 0.5, 1.0 - 0.5),
    Vector3(1.0 - 0.5, 1.0 - 0.5, 0.0 - 0.5),
    Vector3(1.0 - 0.5, 1.0 - 0.5, 1.0 - 0.5),
  ],
  triangles: [
    (1 - 1, 7 - 1, 5 - 1),
    (1 - 1, 3 - 1, 7 - 1),
    (1 - 1, 4 - 1, 3 - 1),
    (1 - 1, 2 - 1, 4 - 1),
    (3 - 1, 8 - 1, 7 - 1),
    (3 - 1, 4 - 1, 8 - 1),
    (5 - 1, 7 - 1, 8 - 1),
    (5 - 1, 8 - 1, 6 - 1),
    (1 - 1, 5 - 1, 6 - 1),
    (1 - 1, 6 - 1, 2 - 1),
    (2 - 1, 6 - 1, 8 - 1),
    (2 - 1, 8 - 1, 4 - 1),
  ],
);

final Object3D sphere = Object3D(
  vertices: [
    Vector3(0.0, 0.5, -2.54558420181),
    Vector3(1.84198486805, -0.838264584541, -1.13842344284),
    Vector3(-0.703561306, -1.66537570953, -1.13842344284),
    Vector3(-2.27683401108, 0.5, -1.13842344284),
    Vector3(-0.703561306, 2.66537570953, -1.13842344284),
    Vector3(1.84198486805, 1.83826458454, -1.13842344284),
    Vector3(0.703561306, -1.66537570953, 1.13842344284),
    Vector3(-1.84198486805, -0.838264584541, 1.13842344284),
    Vector3(-1.84198486805, 1.83826458454, 1.13842344284),
    Vector3(0.703561306, 2.66537570953, 1.13842344284),
    Vector3(2.27683401108, 0.5, 1.13842344284),
    Vector3(0.0, 0.5, 2.54558420181),
    Vector3(1.08269488811, -0.286614596844, -2.16541218758),
    Vector3(-0.413544327021, -0.772780179977, -2.16541218758),
    Vector3(0.669154822826, -1.55940723419, -1.33830952644),
    Vector3(1.08269488811, 1.28661465645, -2.16541218758),
    Vector3(2.16539573669, 0.5, -1.33830487728),
    Vector3(-1.33828949928, 0.5, -2.16540551186),
    Vector3(-1.7518440485, -0.772784352303, -1.33830583096),
    Vector3(-0.413544327021, 1.77278017998, -2.16541218758),
    Vector3(-1.7518440485, 1.7727843523, -1.33830583096),
    Vector3(0.669154822826, 2.55940723419, -1.33830952644),
    Vector3(2.42099809647, 1.28661775589, 0.0),
    Vector3(2.42099809647, -0.28661775589, 0.0),
    Vector3(1.49625790119, -1.5594201088, 0.0),
    Vector3(0.0, -2.04558420181, 0.0),
    Vector3(-1.49625790119, -1.5594201088, 0.0),
    Vector3(-2.42099809647, -0.28661775589, 0.0),
    Vector3(-2.42099809647, 1.28661775589, 0.0),
    Vector3(-1.49625790119, 2.5594201088, 0.0),
    Vector3(0.0, 3.04558420181, 0.0),
    Vector3(1.49625790119, 2.5594201088, 0.0),
    Vector3(1.7518440485, -0.772784352303, 1.33830583096),
    Vector3(-0.669154822826, -1.55940723419, 1.33830952644),
    Vector3(-2.16539573669, 0.5, 1.33830487728),
    Vector3(-0.669154822826, 2.55940723419, 1.33830952644),
    Vector3(1.7518440485, 1.7727843523, 1.33830583096),
    Vector3(1.33828949928, 0.5, 2.16540551186),
    Vector3(0.413544327021, -0.772780179977, 2.16541218758),
    Vector3(-1.08269488811, -0.286614596844, 2.16541218758),
    Vector3(-1.08269488811, 1.28661465645, 2.16541218758),
    Vector3(0.413544327021, 1.77278017998, 2.16541218758),
    Vector3(1.27628755569, 2.28711080551, 1.28737151623),
    Vector3(2.09404230118, 1.1615729332, 1.28736424446),
    Vector3(0.580656588078, 2.28710746765, 1.71728980541),
    Vector3(0.214953452349, 1.16156983376, 2.44869756699),
    Vector3(1.87908375263, 0.5, 1.71727788448),
    Vector3(0.695621073246, 0.5, 2.44869589806),
    Vector3(1.13841235638, 1.83828282356, 1.84201407433),
    Vector3(0.920993208885, 1.16913986206, 2.27684497833),
    Vector3(1.62457787991, 1.16914176941, 1.84200847149),
    Vector3(-1.30525624752, 2.26606321335, 1.28737187386),
    Vector3(0.0178840458393, 2.69598531723, 1.28737258911),
    Vector3(-1.52020871639, 1.60448336601, 1.71728873253),
    Vector3(-0.562766730785, 0.908869147301, 2.44869756699),
    Vector3(-0.921001434326, 1.99624156952, 1.84201455116),
    Vector3(-0.351792931557, 1.58268678188, 2.27684664726),
    Vector3(-0.134382337332, 2.25183391571, 1.84201490879),
    Vector3(-2.08298039436, -0.19561111927, 1.287368536),
    Vector3(-2.08298039436, 1.19561111927, 1.287368536),
    Vector3(-1.52020871639, -0.604483366013, 1.71728873253),
    Vector3(-0.562766730785, 0.0911308526993, 2.44869756699),
    Vector3(-1.70762121677, 0.0864524841309, 1.84201192856),
    Vector3(-1.13841044903, 0.5, 2.2768445015),
    Vector3(-1.70762121677, 0.913547515869, 1.84201192856),
    Vector3(0.0178840458393, -1.69598531723, 1.28737258911),
    Vector3(-1.30525624752, -1.26606333256, 1.28737187386),
    Vector3(0.580656588078, -1.28710758686, 1.71728980541),
    Vector3(0.214953452349, -0.16156989336, 2.44869756699),
    Vector3(-0.134382337332, -1.25183391571, 1.84201490879),
    Vector3(-0.351792931557, -0.582686781883, 2.27684664726),
    Vector3(-0.921001434326, -0.996241569519, 1.84201455116),
    Vector3(1.27628755569, -1.2871106863, 1.28737151623),
    Vector3(2.09404230118, -0.161572933197, 1.28736424446),
    Vector3(1.62457787991, -0.169141769409, 1.84200847149),
    Vector3(0.920993208885, -0.169139921665, 2.27684497833),
    Vector3(1.13841235638, -0.838282823563, 1.84201407433),
    Vector3(1.73517549038, 2.26607275009, -0.591737806797),
    Vector3(1.14343810081, 2.69599509239, 0.591738045216),
    Vector3(2.21584224701, 1.60448586941, -0.591737508774),
    Vector3(2.44185876846, 0.908871412277, 0.591734528542),
    Vector3(2.05942463875, 1.9962515831, 0.0),
    Vector3(2.19379520416, 1.58269298077, 0.703589677811),
    Vector3(1.70762968063, 2.2518453598, 0.703589677811),
    Vector3(-1.14343810081, 2.69599509239, -0.591738045216),
    Vector3(-1.73517549038, 2.26607275009, 0.591737806797),
    Vector3(-0.365701913834, 2.9486951828, -0.591737627983),
    Vector3(0.365701913834, 2.9486951828, 0.591737627983),
    Vector3(-0.7866294384, 2.92099428177, 0.0),
    Vector3(-0.351796030998, 2.92099094391, 0.703592061996),
    Vector3(-1.13842558861, 2.66539716721, 0.703591346741),
    Vector3(-2.44185876846, 0.0911285579205, -0.591734528542),
    Vector3(-2.21584224701, -0.604485869408, 0.591737508774),
    Vector3(-2.44185876846, 0.908871412277, -0.591734528542),
    Vector3(-2.21584224701, 1.60448586941, 0.591737508774),
    Vector3(-2.54558420181, 0.5, 0.0),
    Vector3(-2.41121101379, 0.913549661636, 0.70358890295),
    Vector3(-2.41121101379, 0.086450368166, 0.70358890295),
    Vector3(-0.365701913834, -1.9486951828, -0.591737627983),
    Vector3(0.365701913834, -1.9486951828, 0.591737627983),
    Vector3(-1.14343810081, -1.69599509239, -0.591738045216),
    Vector3(-1.73517549038, -1.26607263088, 0.591737806797),
    Vector3(-0.7866294384, -1.92099428177, 0.0),
    Vector3(-1.13842558861, -1.66539716721, 0.703591346741),
    Vector3(-0.351796030998, -1.92099094391, 0.703592061996),
    Vector3(2.21584224701, -0.604485869408, -0.591737508774),
    Vector3(2.44185876846, 0.0911285579205, 0.591734528542),
    Vector3(1.14343810081, -1.69599509239, 0.591738045216),
    Vector3(1.73517549038, -1.26607263088, -0.591737806797),
    Vector3(2.05942463875, -0.996251583099, 0.0),
    Vector3(1.70762968063, -1.25184524059, 0.703589677811),
    Vector3(2.19379520416, -0.582692980766, 0.703589677811),
    Vector3(-0.0178840458393, 2.69598531723, -1.28737258911),
    Vector3(1.30525624752, 2.26606321335, -1.28737187386),
    Vector3(0.351796030998, 2.92099094391, -0.703592061996),
    Vector3(0.7866294384, 2.92099428177, 0.0),
    Vector3(1.13842558861, 2.66539716721, -0.703591346741),
    Vector3(-2.09404230118, 1.1615729332, -1.28736424446),
    Vector3(-1.27628755569, 2.28711080551, -1.28737151623),
    Vector3(-2.19379520416, 1.58269298077, -0.703589677811),
    Vector3(-2.05942463875, 1.9962515831, 0.0),
    Vector3(-1.70762968063, 2.2518453598, -0.703589677811),
    Vector3(-1.27628755569, -1.2871106863, -1.28737151623),
    Vector3(-2.09404230118, -0.161572933197, -1.28736424446),
    Vector3(-1.70762968063, -1.25184524059, -0.703589677811),
    Vector3(-2.05942463875, -0.996251583099, 0.0),
    Vector3(-2.19379520416, -0.582692980766, -0.703589677811),
    Vector3(-0.0178840458393, -1.69598531723, -1.28737258911),
    Vector3(1.30525624752, -1.26606333256, -1.28737187386),
    Vector3(1.13842558861, -1.66539716721, -0.703591346741),
    Vector3(0.7866294384, -1.92099428177, 0.0),
    Vector3(0.351796030998, -1.92099094391, -0.703592061996),
    Vector3(2.08298039436, 1.19561111927, -1.287368536),
    Vector3(2.08298039436, -0.19561111927, -1.287368536),
    Vector3(2.41121101379, 0.913549661636, -0.70358890295),
    Vector3(2.54558420181, 0.5, 0.0),
    Vector3(2.41121101379, 0.086450368166, -0.70358890295),
    Vector3(-0.580656588078, 2.28710746765, -1.71728980541),
    Vector3(-0.214953452349, 1.16156983376, -2.44869756699),
    Vector3(1.52020871639, 1.60448336601, -1.71728873253),
    Vector3(0.562766730785, 0.908869147301, -2.44869756699),
    Vector3(0.351792931557, 1.58268678188, -2.27684664726),
    Vector3(0.921001434326, 1.99624156952, -1.84201455116),
    Vector3(0.134382337332, 2.25183391571, -1.84201490879),
    Vector3(-1.87908375263, 0.5, -1.71727788448),
    Vector3(-0.695621073246, 0.5, -2.44869589806),
    Vector3(-0.920993208885, 1.16913986206, -2.27684497833),
    Vector3(-1.13841235638, 1.83828282356, -1.84201407433),
    Vector3(-1.62457787991, 1.16914176941, -1.84200847149),
    Vector3(-0.580656588078, -1.28710758686, -1.71728980541),
    Vector3(-0.214953452349, -0.16156989336, -2.44869756699),
    Vector3(-0.920993208885, -0.169139921665, -2.27684497833),
    Vector3(-1.62457787991, -0.169141769409, -1.84200847149),
    Vector3(-1.13841235638, -0.838282823563, -1.84201407433),
    Vector3(0.562766730785, 0.0911308526993, -2.44869756699),
    Vector3(1.52020871639, -0.604483366013, -1.71728873253),
    Vector3(1.13841044903, 0.5, -2.2768445015),
    Vector3(1.70762121677, 0.913547515869, -1.84201192856),
    Vector3(1.70762121677, 0.0864524841309, -1.84201192856),
    Vector3(0.351792931557, -0.582686781883, -2.27684664726),
    Vector3(0.134382337332, -1.25183391571, -1.84201490879),
    Vector3(0.921001434326, -0.996241569519, -1.84201455116),
  ],
  triangles: [
    (160 - 1, 162 - 1, 161 - 1),
    (157 - 1, 158 - 1, 159 - 1),
    (152 - 1, 154 - 1, 153 - 1),
    (147 - 1, 149 - 1, 148 - 1),
    (142 - 1, 144 - 1, 143 - 1),
    (135 - 1, 136 - 1, 137 - 1),
    (130 - 1, 131 - 1, 132 - 1),
    (125 - 1, 126 - 1, 127 - 1),
    (120 - 1, 121 - 1, 122 - 1),
    (115 - 1, 116 - 1, 117 - 1),
    (110 - 1, 112 - 1, 111 - 1),
    (103 - 1, 105 - 1, 104 - 1),
    (96 - 1, 98 - 1, 97 - 1),
    (89 - 1, 91 - 1, 90 - 1),
    (82 - 1, 84 - 1, 83 - 1),
    (75 - 1, 76 - 1, 77 - 1),
    (70 - 1, 71 - 1, 72 - 1),
    (63 - 1, 64 - 1, 65 - 1),
    (56 - 1, 57 - 1, 58 - 1),
    (49 - 1, 50 - 1, 51 - 1),
    (45 - 1, 49 - 1, 43 - 1),
    (48 - 1, 50 - 1, 46 - 1),
    (44 - 1, 51 - 1, 47 - 1),
    (54 - 1, 56 - 1, 52 - 1),
    (46 - 1, 57 - 1, 55 - 1),
    (53 - 1, 58 - 1, 45 - 1),
    (61 - 1, 63 - 1, 59 - 1),
    (55 - 1, 64 - 1, 62 - 1),
    (60 - 1, 65 - 1, 54 - 1),
    (68 - 1, 70 - 1, 66 - 1),
    (62 - 1, 71 - 1, 69 - 1),
    (67 - 1, 72 - 1, 61 - 1),
    (47 - 1, 75 - 1, 74 - 1),
    (69 - 1, 76 - 1, 48 - 1),
    (73 - 1, 77 - 1, 68 - 1),
    (80 - 1, 78 - 1, 82 - 1),
    (44 - 1, 81 - 1, 83 - 1),
    (79 - 1, 43 - 1, 84 - 1),
    (87 - 1, 85 - 1, 89 - 1),
    (53 - 1, 88 - 1, 90 - 1),
    (86 - 1, 52 - 1, 91 - 1),
    (94 - 1, 92 - 1, 96 - 1),
    (60 - 1, 95 - 1, 97 - 1),
    (93 - 1, 59 - 1, 98 - 1),
    (101 - 1, 99 - 1, 103 - 1),
    (67 - 1, 102 - 1, 104 - 1),
    (100 - 1, 66 - 1, 105 - 1),
    (109 - 1, 106 - 1, 110 - 1),
    (73 - 1, 108 - 1, 111 - 1),
    (107 - 1, 74 - 1, 112 - 1),
    (87 - 1, 115 - 1, 113 - 1),
    (79 - 1, 116 - 1, 88 - 1),
    (114 - 1, 117 - 1, 78 - 1),
    (94 - 1, 120 - 1, 118 - 1),
    (86 - 1, 121 - 1, 95 - 1),
    (119 - 1, 122 - 1, 85 - 1),
    (101 - 1, 125 - 1, 123 - 1),
    (93 - 1, 126 - 1, 102 - 1),
    (124 - 1, 127 - 1, 92 - 1),
    (109 - 1, 130 - 1, 129 - 1),
    (100 - 1, 131 - 1, 108 - 1),
    (128 - 1, 132 - 1, 99 - 1),
    (80 - 1, 135 - 1, 133 - 1),
    (107 - 1, 136 - 1, 81 - 1),
    (134 - 1, 137 - 1, 106 - 1),
    (141 - 1, 139 - 1, 142 - 1),
    (114 - 1, 140 - 1, 143 - 1),
    (138 - 1, 113 - 1, 144 - 1),
    (139 - 1, 146 - 1, 147 - 1),
    (119 - 1, 138 - 1, 148 - 1),
    (145 - 1, 118 - 1, 149 - 1),
    (146 - 1, 151 - 1, 152 - 1),
    (124 - 1, 145 - 1, 153 - 1),
    (150 - 1, 123 - 1, 154 - 1),
    (141 - 1, 157 - 1, 155 - 1),
    (133 - 1, 158 - 1, 140 - 1),
    (156 - 1, 159 - 1, 134 - 1),
    (151 - 1, 155 - 1, 160 - 1),
    (128 - 1, 150 - 1, 161 - 1),
    (156 - 1, 129 - 1, 162 - 1),
    (13 - 1, 156 - 1, 162 - 1),
    (15 - 1, 162 - 1, 129 - 1),
    (2 - 1, 129 - 1, 156 - 1),
    (15 - 1, 128 - 1, 161 - 1),
    (14 - 1, 161 - 1, 150 - 1),
    (3 - 1, 150 - 1, 128 - 1),
    (14 - 1, 151 - 1, 160 - 1),
    (13 - 1, 160 - 1, 155 - 1),
    (1 - 1, 155 - 1, 151 - 1),
    (13 - 1, 159 - 1, 156 - 1),
    (17 - 1, 134 - 1, 159 - 1),
    (2 - 1, 156 - 1, 134 - 1),
    (17 - 1, 158 - 1, 133 - 1),
    (16 - 1, 140 - 1, 158 - 1),
    (6 - 1, 133 - 1, 140 - 1),
    (16 - 1, 157 - 1, 141 - 1),
    (13 - 1, 155 - 1, 157 - 1),
    (1 - 1, 141 - 1, 155 - 1),
    (14 - 1, 150 - 1, 154 - 1),
    (19 - 1, 154 - 1, 123 - 1),
    (3 - 1, 123 - 1, 150 - 1),
    (19 - 1, 124 - 1, 153 - 1),
    (18 - 1, 153 - 1, 145 - 1),
    (4 - 1, 145 - 1, 124 - 1),
    (18 - 1, 146 - 1, 152 - 1),
    (14 - 1, 152 - 1, 151 - 1),
    (1 - 1, 151 - 1, 146 - 1),
    (18 - 1, 145 - 1, 149 - 1),
    (21 - 1, 149 - 1, 118 - 1),
    (4 - 1, 118 - 1, 145 - 1),
    (21 - 1, 119 - 1, 148 - 1),
    (20 - 1, 148 - 1, 138 - 1),
    (5 - 1, 138 - 1, 119 - 1),
    (20 - 1, 139 - 1, 147 - 1),
    (18 - 1, 147 - 1, 146 - 1),
    (1 - 1, 146 - 1, 139 - 1),
    (20 - 1, 138 - 1, 144 - 1),
    (22 - 1, 144 - 1, 113 - 1),
    (5 - 1, 113 - 1, 138 - 1),
    (22 - 1, 114 - 1, 143 - 1),
    (16 - 1, 143 - 1, 140 - 1),
    (6 - 1, 140 - 1, 114 - 1),
    (16 - 1, 141 - 1, 142 - 1),
    (20 - 1, 142 - 1, 139 - 1),
    (1 - 1, 139 - 1, 141 - 1),
    (17 - 1, 137 - 1, 134 - 1),
    (24 - 1, 106 - 1, 137 - 1),
    (2 - 1, 134 - 1, 106 - 1),
    (24 - 1, 136 - 1, 107 - 1),
    (23 - 1, 81 - 1, 136 - 1),
    (11 - 1, 107 - 1, 81 - 1),
    (23 - 1, 135 - 1, 80 - 1),
    (17 - 1, 133 - 1, 135 - 1),
    (6 - 1, 80 - 1, 133 - 1),
    (15 - 1, 132 - 1, 128 - 1),
    (26 - 1, 99 - 1, 132 - 1),
    (3 - 1, 128 - 1, 99 - 1),
    (26 - 1, 131 - 1, 100 - 1),
    (25 - 1, 108 - 1, 131 - 1),
    (7 - 1, 100 - 1, 108 - 1),
    (25 - 1, 130 - 1, 109 - 1),
    (15 - 1, 129 - 1, 130 - 1),
    (2 - 1, 109 - 1, 129 - 1),
    (19 - 1, 127 - 1, 124 - 1),
    (28 - 1, 92 - 1, 127 - 1),
    (4 - 1, 124 - 1, 92 - 1),
    (28 - 1, 126 - 1, 93 - 1),
    (27 - 1, 102 - 1, 126 - 1),
    (8 - 1, 93 - 1, 102 - 1),
    (27 - 1, 125 - 1, 101 - 1),
    (19 - 1, 123 - 1, 125 - 1),
    (3 - 1, 101 - 1, 123 - 1),
    (21 - 1, 122 - 1, 119 - 1),
    (30 - 1, 85 - 1, 122 - 1),
    (5 - 1, 119 - 1, 85 - 1),
    (30 - 1, 121 - 1, 86 - 1),
    (29 - 1, 95 - 1, 121 - 1),
    (9 - 1, 86 - 1, 95 - 1),
    (29 - 1, 120 - 1, 94 - 1),
    (21 - 1, 118 - 1, 120 - 1),
    (4 - 1, 94 - 1, 118 - 1),
    (22 - 1, 117 - 1, 114 - 1),
    (32 - 1, 78 - 1, 117 - 1),
    (6 - 1, 114 - 1, 78 - 1),
    (32 - 1, 116 - 1, 79 - 1),
    (31 - 1, 88 - 1, 116 - 1),
    (10 - 1, 79 - 1, 88 - 1),
    (31 - 1, 115 - 1, 87 - 1),
    (22 - 1, 113 - 1, 115 - 1),
    (5 - 1, 87 - 1, 113 - 1),
    (24 - 1, 107 - 1, 112 - 1),
    (33 - 1, 112 - 1, 74 - 1),
    (11 - 1, 74 - 1, 107 - 1),
    (33 - 1, 73 - 1, 111 - 1),
    (25 - 1, 111 - 1, 108 - 1),
    (7 - 1, 108 - 1, 73 - 1),
    (25 - 1, 109 - 1, 110 - 1),
    (24 - 1, 110 - 1, 106 - 1),
    (2 - 1, 106 - 1, 109 - 1),
    (26 - 1, 100 - 1, 105 - 1),
    (34 - 1, 105 - 1, 66 - 1),
    (7 - 1, 66 - 1, 100 - 1),
    (34 - 1, 67 - 1, 104 - 1),
    (27 - 1, 104 - 1, 102 - 1),
    (8 - 1, 102 - 1, 67 - 1),
    (27 - 1, 101 - 1, 103 - 1),
    (26 - 1, 103 - 1, 99 - 1),
    (3 - 1, 99 - 1, 101 - 1),
    (28 - 1, 93 - 1, 98 - 1),
    (35 - 1, 98 - 1, 59 - 1),
    (8 - 1, 59 - 1, 93 - 1),
    (35 - 1, 60 - 1, 97 - 1),
    (29 - 1, 97 - 1, 95 - 1),
    (9 - 1, 95 - 1, 60 - 1),
    (29 - 1, 94 - 1, 96 - 1),
    (28 - 1, 96 - 1, 92 - 1),
    (4 - 1, 92 - 1, 94 - 1),
    (30 - 1, 86 - 1, 91 - 1),
    (36 - 1, 91 - 1, 52 - 1),
    (9 - 1, 52 - 1, 86 - 1),
    (36 - 1, 53 - 1, 90 - 1),
    (31 - 1, 90 - 1, 88 - 1),
    (10 - 1, 88 - 1, 53 - 1),
    (31 - 1, 87 - 1, 89 - 1),
    (30 - 1, 89 - 1, 85 - 1),
    (5 - 1, 85 - 1, 87 - 1),
    (32 - 1, 79 - 1, 84 - 1),
    (37 - 1, 84 - 1, 43 - 1),
    (10 - 1, 43 - 1, 79 - 1),
    (37 - 1, 44 - 1, 83 - 1),
    (23 - 1, 83 - 1, 81 - 1),
    (11 - 1, 81 - 1, 44 - 1),
    (23 - 1, 80 - 1, 82 - 1),
    (32 - 1, 82 - 1, 78 - 1),
    (6 - 1, 78 - 1, 80 - 1),
    (33 - 1, 77 - 1, 73 - 1),
    (39 - 1, 68 - 1, 77 - 1),
    (7 - 1, 73 - 1, 68 - 1),
    (39 - 1, 76 - 1, 69 - 1),
    (38 - 1, 48 - 1, 76 - 1),
    (12 - 1, 69 - 1, 48 - 1),
    (38 - 1, 75 - 1, 47 - 1),
    (33 - 1, 74 - 1, 75 - 1),
    (11 - 1, 47 - 1, 74 - 1),
    (34 - 1, 72 - 1, 67 - 1),
    (40 - 1, 61 - 1, 72 - 1),
    (8 - 1, 67 - 1, 61 - 1),
    (40 - 1, 71 - 1, 62 - 1),
    (39 - 1, 69 - 1, 71 - 1),
    (12 - 1, 62 - 1, 69 - 1),
    (39 - 1, 70 - 1, 68 - 1),
    (34 - 1, 66 - 1, 70 - 1),
    (7 - 1, 68 - 1, 66 - 1),
    (35 - 1, 65 - 1, 60 - 1),
    (41 - 1, 54 - 1, 65 - 1),
    (9 - 1, 60 - 1, 54 - 1),
    (41 - 1, 64 - 1, 55 - 1),
    (40 - 1, 62 - 1, 64 - 1),
    (12 - 1, 55 - 1, 62 - 1),
    (40 - 1, 63 - 1, 61 - 1),
    (35 - 1, 59 - 1, 63 - 1),
    (8 - 1, 61 - 1, 59 - 1),
    (36 - 1, 58 - 1, 53 - 1),
    (42 - 1, 45 - 1, 58 - 1),
    (10 - 1, 53 - 1, 45 - 1),
    (42 - 1, 57 - 1, 46 - 1),
    (41 - 1, 55 - 1, 57 - 1),
    (12 - 1, 46 - 1, 55 - 1),
    (41 - 1, 56 - 1, 54 - 1),
    (36 - 1, 52 - 1, 56 - 1),
    (9 - 1, 54 - 1, 52 - 1),
    (37 - 1, 51 - 1, 44 - 1),
    (38 - 1, 47 - 1, 51 - 1),
    (11 - 1, 44 - 1, 47 - 1),
    (38 - 1, 50 - 1, 48 - 1),
    (42 - 1, 46 - 1, 50 - 1),
    (12 - 1, 48 - 1, 46 - 1),
    (42 - 1, 49 - 1, 45 - 1),
    (37 - 1, 43 - 1, 49 - 1),
    (10 - 1, 45 - 1, 43 - 1),
    (42 - 1, 50 - 1, 49 - 1),
    (38 - 1, 51 - 1, 50 - 1),
    (37 - 1, 49 - 1, 51 - 1),
    (41 - 1, 57 - 1, 56 - 1),
    (42 - 1, 58 - 1, 57 - 1),
    (36 - 1, 56 - 1, 58 - 1),
    (40 - 1, 64 - 1, 63 - 1),
    (41 - 1, 65 - 1, 64 - 1),
    (35 - 1, 63 - 1, 65 - 1),
    (39 - 1, 71 - 1, 70 - 1),
    (40 - 1, 72 - 1, 71 - 1),
    (34 - 1, 70 - 1, 72 - 1),
    (38 - 1, 76 - 1, 75 - 1),
    (39 - 1, 77 - 1, 76 - 1),
    (33 - 1, 75 - 1, 77 - 1),
    (23 - 1, 82 - 1, 83 - 1),
    (37 - 1, 83 - 1, 84 - 1),
    (32 - 1, 84 - 1, 82 - 1),
    (31 - 1, 89 - 1, 90 - 1),
    (36 - 1, 90 - 1, 91 - 1),
    (30 - 1, 91 - 1, 89 - 1),
    (29 - 1, 96 - 1, 97 - 1),
    (35 - 1, 97 - 1, 98 - 1),
    (28 - 1, 98 - 1, 96 - 1),
    (27 - 1, 103 - 1, 104 - 1),
    (34 - 1, 104 - 1, 105 - 1),
    (26 - 1, 105 - 1, 103 - 1),
    (25 - 1, 110 - 1, 111 - 1),
    (33 - 1, 111 - 1, 112 - 1),
    (24 - 1, 112 - 1, 110 - 1),
    (31 - 1, 116 - 1, 115 - 1),
    (32 - 1, 117 - 1, 116 - 1),
    (22 - 1, 115 - 1, 117 - 1),
    (29 - 1, 121 - 1, 120 - 1),
    (30 - 1, 122 - 1, 121 - 1),
    (21 - 1, 120 - 1, 122 - 1),
    (27 - 1, 126 - 1, 125 - 1),
    (28 - 1, 127 - 1, 126 - 1),
    (19 - 1, 125 - 1, 127 - 1),
    (25 - 1, 131 - 1, 130 - 1),
    (26 - 1, 132 - 1, 131 - 1),
    (15 - 1, 130 - 1, 132 - 1),
    (23 - 1, 136 - 1, 135 - 1),
    (24 - 1, 137 - 1, 136 - 1),
    (17 - 1, 135 - 1, 137 - 1),
    (16 - 1, 142 - 1, 143 - 1),
    (22 - 1, 143 - 1, 144 - 1),
    (20 - 1, 144 - 1, 142 - 1),
    (20 - 1, 147 - 1, 148 - 1),
    (21 - 1, 148 - 1, 149 - 1),
    (18 - 1, 149 - 1, 147 - 1),
    (18 - 1, 152 - 1, 153 - 1),
    (19 - 1, 153 - 1, 154 - 1),
    (14 - 1, 154 - 1, 152 - 1),
    (16 - 1, 158 - 1, 157 - 1),
    (17 - 1, 159 - 1, 158 - 1),
    (13 - 1, 157 - 1, 159 - 1),
    (14 - 1, 160 - 1, 161 - 1),
    (15 - 1, 161 - 1, 162 - 1),
    (13 - 1, 162 - 1, 160 - 1),
  ],
);

class ThreeDRendererPage extends StatefulWidget {
  const ThreeDRendererPage({super.key});

  @override
  State<ThreeDRendererPage> createState() => _ThreeDRendererPageState();
}

class _ThreeDRendererPageState extends State<ThreeDRendererPage> {
  double xRotation = 0;
  double yRotation = 0;
  double zRotation = 0;

  @override
  Widget build(BuildContext context) => Scaffold(
        body: Stack(
          children: [
            SizedBox.expand(
              child: GestureDetector(
                onPanUpdate: (DragUpdateDetails details) {
                  setState(() {
                    xRotation += details.delta.dy * 0.001;
                    zRotation += details.delta.dx * 0.001;
                  });
                },
                child: View3D(
                  object: sphere,
                  xRotation: xRotation,
                  yRotation: yRotation,
                  zRotation: zRotation,
                ),
              ),
            ),
          ],
        ),
      );
}

class View3D extends StatelessWidget {
  final Object3D object;
  final double xRotation;
  final double yRotation;
  final double zRotation;

  const View3D({
    required this.object,
    required this.xRotation,
    required this.yRotation,
    required this.zRotation,
    super.key,
  });

  @override
  Widget build(BuildContext context) => CustomPaint(
        painter: _View3DPainter(
          object,
          xRotation: xRotation,
          yRotation: yRotation,
          zRotation: zRotation,
        ),
      );
}

class _View3DPainter extends CustomPainter {
  final Object3D object;
  final double xRotation;
  final double yRotation;
  final double zRotation;

  static const List<Color> _palette = [...Colors.primaries];
  static final Vector3 cameraPosition = Vector3(0, -7.5, 0);
  static final Vector3 cameraDirection = Vector3(0, 0, 0);

  _View3DPainter(
    this.object, {
    required this.xRotation,
    required this.yRotation,
    required this.zRotation,
  }) : super();

  @override
  void paint(Canvas canvas, Size size) {
    final double aspectRatio = size.width / size.height;
    final List<Vector3> transformedVertices = object.transformedVertices(
      Matrix4.identity()
        ..rotate(Vector3(1, 0, 0), xRotation * math.pi * 2)
        ..rotate(Vector3(0, 1, 0), yRotation * math.pi * 2)
        ..rotate(Vector3(0, 0, 1), zRotation * math.pi * 2),
    );
    final List<Vector3> cameraProjectedVertices =
        transformedVertices.map((Vector3 v) => project(v, cameraPosition, cameraDirection, aspectRatio)).toList();
    final List<(int, (int, int, int))> zSortedTriangles = object.triangles
        .where(((int, int, int) triangle) {
          final (Vector3 v1, Vector3 v2, Vector3 v3) = (
            transformedVertices[triangle.$1],
            transformedVertices[triangle.$2],
            transformedVertices[triangle.$3],
          );
          final Vector3 normal = (v2 - v1).cross(v3 - v1).normalized();
          final double alignment = ((v1 - cameraPosition).normalized()).dot(normal);
          return alignment.isNegative;
          // return triangle;
        })
        .indexed
        .toList()
      ..sort(((int, (int, int, int)) a, (int, (int, int, int)) b) => ((cameraProjectedVertices[b.$2.$1].z +
                  cameraProjectedVertices[b.$2.$2].z +
                  cameraProjectedVertices[b.$2.$3].z) /
              3)
          .compareTo((cameraProjectedVertices[a.$2.$1].z +
                  cameraProjectedVertices[a.$2.$2].z +
                  cameraProjectedVertices[a.$2.$3].z) /
              3));
    final List<Offset> screenSpaceVertices = cameraProjectedVertices.map((Vector3 v) {
      // Remaps coordinates from [-1, 1] to the [0, viewport].
      return Offset((1.0 + v.x) * size.width / 2, (1.0 - v.y) * size.height / 2);
    }).toList();
    final List<Offset> mesh = zSortedTriangles
        .expand(((int, (int, int, int)) triangle) => [
              screenSpaceVertices[triangle.$2.$1],
              screenSpaceVertices[triangle.$2.$2],
              screenSpaceVertices[triangle.$2.$3],
            ])
        .toList();
    final List<Color> colors = zSortedTriangles.expand(((int i, (int, int, int) triangle) obj) {
      final int index = object.triangles.indexOf(obj.$2);
      final (Vector3 v1, Vector3 v2, Vector3 v3) = (
        transformedVertices[obj.$2.$1],
        transformedVertices[obj.$2.$2],
        transformedVertices[obj.$2.$3],
      );
      final Vector3 normal = (v2 - v1).cross(v3 - v1).normalized();
      final Vector3 lightSource = Vector3(10, -10, 0);
      final double alignment = (((v1 - lightSource).normalized()).dot(normal) * -1 + 1) * 0.5;
      final Color baseColor = Colors.white38; //_palette[index % _palette.length];
      final Color shadedColor = Color.fromARGB(
        255,
        (baseColor.red * alignment).round().abs(),
        (baseColor.green * alignment).round().abs(),
        (baseColor.blue * alignment).round().abs(),
      );
      return [shadedColor, shadedColor, shadedColor];
    }).toList();
    final Vertices vertices = Vertices(VertexMode.triangles, mesh, colors: colors);
    canvas.drawVertices(vertices, BlendMode.srcOver, Paint());
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => true;
}
